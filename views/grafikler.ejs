<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>As Yaşam</title>
    <link rel="stylesheet" href="/css/style.css" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Dancing+Script:wght@400..700&family=Montserrat:ital,wght@0,100..900;1,100..900&display=swap"
      rel="stylesheet"
    />
    <!-- Leaflet CSS -->
    <link
      rel="stylesheet"
      href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
    />
    <!-- Leaflet JS -->
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
  </head>
  <body>
    <header class="header">
      <div class="logo">
        <img src="/images/logo.jpeg" alt="Logo" />
        <span>Yaşama Değer Katan Güven ve Rahatlık</span>
      </div>
      <nav class="nav">
        <ul>
          <li><a href="/" class="active">Anasayfa</a></li>
          <li><a href="/subeler">Şubeler</a></li>
          <li><a href="/analizler">Analizler</a></li>
          <li><a href="/grafikler">Grafikler</a></li>
        </ul>
      </nav>
      <div class="profile">
        <img src="/images/ppfoto.jpg" alt="User" />
        <button class="logout-button" onclick="logout()">Çıkış Yap</button>
      </div>
    </header>
    <style>
      .dashboard-container {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
        padding: 20px;
        margin-top: 50px; /* Grafiklerin üstten boşluk almasını sağlar */
      }

      .chart-container {
        background-color: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      }

      canvas {
        width: 100%;
        height: 100%;
      }

      .nav ul li a {
        text-decoration: none;
        color: white;
        font-weight: bold;
        font-family: "Montserrat", sans-serif;
      }
    </style>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <div class="dashboard-container">
      <!-- Dynamic Chart -->
      <div class="chart-container">
        <canvas id="chart1"></canvas>
      </div>
      <!-- Static Charts -->
      <div class="chart-container">
        <canvas id="chart2"></canvas>
      </div>
      <div class="chart-container">
        <canvas id="chart3"></canvas>
      </div>
      <div class="chart-container">
        <canvas id="chart4"></canvas>
      </div>
    </div>

    <script>
      // Fetch data for the dynamic bar chart
      fetch("/grafikler/grafik-veri")
        .then((response) => {
          if (!response.ok) {
            throw new Error(
              "Network response was not ok " + response.statusText
            );
          }
          return response.json();
        })
        .then((data) => {
          console.log("Gelen Veri:", data); // Konsola gelen veriyi yazdır

          const labels = data.map((ilce) => ilce.ilce_isim);
          const nufusData = data.map((ilce) => ilce.nufus);
          const yasliNufusData = data.map((ilce) => ilce.yasli_nufus);

          const ctx = document.getElementById("chart1").getContext("2d");
          new Chart(ctx, {
            type: "bar",
            data: {
              labels: labels,
              datasets: [
                {
                  label: "Toplam Nüfus",
                  data: nufusData,
                  backgroundColor: "rgba(75, 192, 192, 0.2)",
                  borderColor: "rgba(75, 192, 192, 1)",
                  borderWidth: 1,
                },
                {
                  label: "Yaşlı Nüfus",
                  data: yasliNufusData,
                  backgroundColor: "rgba(153, 102, 255, 0.2)",
                  borderColor: "rgba(153, 102, 255, 1)",
                  borderWidth: 1,
                },
              ],
            },
            options: {
              responsive: true,
              scales: {
                y: {
                  beginAtZero: true,
                },
              },
            },
          });
        })
        .catch((error) => console.error("Error fetching chart data:", error));

      // Static data for the other charts
      const labelsStatic = [
        "District 1",
        "District 2",
        "District 3",
        "District 4",
        "District 5",
      ];

      const data2 = {
        labels: labelsStatic,
        datasets: [
          {
            label: "Elderly Population",
            data: [50000, 20000, 40000, 30000, 10000],
            backgroundColor: "rgba(153, 102, 255, 0.2)",
            borderColor: "rgba(153, 102, 255, 1)",
            borderWidth: 1,
          },
        ],
      };

      const data3 = {
        labels: labelsStatic,
        datasets: [
          {
            label: "Development Index",
            data: [2.5, 1.5, 3.0, 1.0, 2.0],
            backgroundColor: "rgba(255, 206, 86, 0.2)",
            borderColor: "rgba(255, 206, 86, 1)",
            borderWidth: 1,
          },
        ],
      };

      const data4 = {
        labels: labelsStatic,
        datasets: [
          {
            label: "Nursing Homes",
            data: [4, 2, 5, 1, 3],
            backgroundColor: "rgba(255, 99, 132, 0.2)",
            borderColor: "rgba(255, 99, 132, 1)",
            borderWidth: 1,
          },
        ],
      };

      // Render static charts
      fetch("/grafikler/saglik-veri")
        .then((response) => {
          if (!response.ok) {
            throw new Error(
              "Network response was not ok " + response.statusText
            );
          }
          return response.json();
        })
        .then((data) => {
          console.log("Huzurevi ve Hastane Gelen Veri:", data); // Konsola yazdır

          const labels = data.map((birim) => birim.ilce_isim);
          const huzureviData = data.map((birim) => birim.huzurevi_sayisi);
          const hastaneData = data.map((birim) => birim.hastane_sayisi);

          new Chart(document.getElementById("chart2"), {
            type: "bar",
            data: {
              labels: labels,
              datasets: [
                {
                  label: "Huzurevi Sayısı",
                  data: huzureviData,
                  backgroundColor: "rgba(75, 192, 192, 0.2)",
                  borderColor: "rgba(75, 192, 192, 1)",
                  borderWidth: 1,
                },
                {
                  label: "Hastane Sayısı",
                  data: hastaneData,
                  backgroundColor: "rgba(255, 99, 132, 0.2)",
                  borderColor: "rgba(255, 99, 132, 1)",
                  borderWidth: 1,
                },
              ],
            },
            options: {
              responsive: true,
              scales: {
                y: {
                  beginAtZero: true,
                },
              },
            },
          });
        })
        .catch((error) =>
          console.error("Error fetching healthcare data:", error)
        );

      fetch("/grafikler/gelismislik-skor")
        .then((response) => {
          if (!response.ok) {
            throw new Error(
              "Network response was not ok " + response.statusText
            );
          }
          return response.json();
        })
        .then((data) => {
          console.log("Gelişmişlik Skoru Gelen Veri:", data); // Konsola yazdır

          const labels = data.map((ilce) => ilce.ilce_isim);
          const skorData = data.map((ilce) => ilce.gelismislik_skor);

          const ctx = document.getElementById("chart3").getContext("2d");
          new Chart(ctx, {
            type: "line",
            data: {
              labels: labels,
              datasets: [
                {
                  label: "Gelişmişlik Skor",
                  data: skorData,
                  backgroundColor: "rgba(255, 206, 86, 0.2)",
                  borderColor: "rgba(255, 206, 86, 1)",
                  borderWidth: 2,
                  fill: true,
                },
              ],
            },
            options: {
              responsive: true,
              scales: {
                y: {
                  beginAtZero: true,
                },
              },
            },
          });
        })
        .catch((error) =>
          console.error("Error fetching development score data:", error)
        );

      fetch("/grafikler/yasli-orani")
        .then((response) => {
          if (!response.ok) {
            throw new Error(
              "Network response was not ok " + response.statusText
            );
          }
          return response.json();
        })
        .then((data) => {
          console.log("Yaşlı Oranı Gelen Veri:", data); // Konsola yazdır

          const labels = data.map((ilce) => ilce.ilce_isim);
          const yasliOraniData = data.map((ilce) => ilce.yasli_orani);

          new Chart(document.getElementById("chart4"), {
            type: "line",
            data: {
              labels: labels,
              datasets: [
                {
                  label: "Yaşlı Oranı (%)",
                  data: yasliOraniData,
                  backgroundColor: "rgba(153, 102, 255, 0.2)",
                  borderColor: "rgba(153, 102, 255, 1)",
                  borderWidth: 2,
                  fill: true,
                },
              ],
            },
            options: {
              responsive: true,
              scales: {
                y: {
                  beginAtZero: true,
                  ticks: {
                    callback: function (value) {
                      return value + "%"; // Yüzdelik sembolü ekle
                    },
                  },
                },
              },
            },
          });
        })
        .catch((error) =>
          console.error("Error fetching elderly ratio data:", error)
        );

        function logout() {
        fetch("/auth/logout", { method: "POST" })
          .then((response) => {
            if (response.ok) {
              window.location.href = "/login";
            } else {
              alert("Çıkış yaparken bir hata oluştu.");
            }
          })
          .catch((err) => console.error("Logout error:", err));
      }
    </script>
  </body>
</html>
